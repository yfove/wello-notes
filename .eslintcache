[{"/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/reportWebVitals.js":"1","/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/index.js":"2","/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/App.js":"3","/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Layout/Header.js":"4","/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Layout/Container.js":"5","/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Lists.js":"6","/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Inputs/Card.js":"7","/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Inputs/List.js":"8","/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Card.js":"9","/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Cards.js":"10"},{"size":362,"mtime":1607140300159,"results":"11","hashOfConfig":"12"},{"size":479,"mtime":1607283017808,"results":"13","hashOfConfig":"12"},{"size":565,"mtime":1607284603496,"results":"14","hashOfConfig":"12"},{"size":424,"mtime":1607284414332,"results":"15","hashOfConfig":"12"},{"size":375,"mtime":1607284531131,"results":"16","hashOfConfig":"12"},{"size":3810,"mtime":1607283502009,"results":"17","hashOfConfig":"12"},{"size":1919,"mtime":1607284743034,"results":"18","hashOfConfig":"12"},{"size":2198,"mtime":1607282050470,"results":"19","hashOfConfig":"12"},{"size":1012,"mtime":1607284276729,"results":"20","hashOfConfig":"12"},{"size":1091,"mtime":1607282974487,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"mw4i9j",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},"/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/reportWebVitals.js",[],["46","47"],"/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/index.js",[],"/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/App.js",["48"],"/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Layout/Header.js",["49"],"/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Layout/Container.js",["50"],"/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Lists.js",["51"],"import React, { useState, useEffect } from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\n// Import from inputs\nimport Cards from \"./Cards\";\nimport ListInput from \"./Inputs/List\";\nimport CardInput from \"./Inputs/Card\";\n\nexport default () => {\n  // setState\n  const [lists, setLists] = useState([]);\n  useEffect(() => {\n    let json = localStorage.getItem(\"lists\");\n    setLists(json === null ? [] : JSON.parse(json));\n    if (json === null) localStorage.setItems(\"lists\", JSON.stringify([]));\n  }, []);\n\n  //   CRUD Funtions\n  const updateList = (data) => {\n    setLists(data);\n    saveList(data);\n  };\n\n  const saveList = (data) =>\n    localStorage.setItem(\"lists\", JSON.stringify(data));\n\n  const deleteList = (index) => {\n    let newList = lists.filter((item, ix) => ix !== index);\n    setLists(newList);\n    saveList(newList);\n  };\n\n  function onDragEnd(result) {\n    if (!result.destination) return;\n    if (\n      result.destination.droppableId === result.source.droppableId &&\n      result.destination.index === result.source.index\n    )\n      return;\n    if (\n      result.source.droppableId.split(\"-\")[0] !==\n      result.destination.droppableId.split(\"-\")[0]\n    )\n      return;\n\n    const source = {\n      category: result.source.droppableId.split(\"-\")[1],\n      index: result.source.index,\n    };\n\n    const destination = {\n      category: result.destination.droppableId.split(\"-\")[1],\n      index: result.destination.index,\n    };\n\n    let newList = JSON.parse(localStorage.getItem(\"lists\"));\n    let sCards = newList[source.category].cards;\n    let dCards = newList[destination.category].cards;\n    let card = sCards[source.index];\n    sCards.splice(source.index, 1);\n    dCards.splice(destination.index, 0, card);\n    updateList(newList);\n  }\n\n  return (\n    <List>\n      <ListInput updateList={updateList} />\n      <DragDropContext onDragEnd={onDragEnd}>\n        <div className=\"categories\">\n          {lists.map((category, index) => {\n            return (\n              <div key={index} className=\"category\">\n                <div className=\"title\">\n                  <i\n                    onClick={() => {\n                      deleteList(index);\n                    }}\n                    className=\"fa fa-trash-o icon\"\n                    aria-hidden=\"true\"\n                  ></i>\n                  <div className=\"text\">{category.title}</div>\n                </div>\n                <CardInput category={index} updateList={updateList} />\n                <Cards\n                  index={index}\n                  data={category.cards}\n                  updateList={updateList}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </DragDropContext>\n    </List>\n  );\n};\n\n// need to display lists when input\n// card will be added to this list\n// how to order them keep id (uuid????)\n\n//styling\nconst List = styled.div`\n  background: pale-blue;\n  margin-top: 5px;\n  .categories {\n    display: flex;\n    flex-wrap: wrap;\n    align-items: flex-start;\n    .category {\n      flex-basis: 24%;\n      background: rgba(19, 19, 19, 0.2);\n      min-height: 80px;\n      box-sizing: content-box;\n      margin: 5px;\n      padding-bottom: 5px;\n      margin-bottom: 10px;\n      @media (max-width: 1000px) {\n        flex-basis: 100%;\n        min-height: 120px;\n      }\n      .title {\n        position: relative;\n        font-weight: bold;\n        font-size: 18px;\n        background: rgba(19, 19, 19, 0.3);\n        padding: 10px 5px;\n        display: flex;\n        padding-right: 25px;\n        word-break: break-all;\n        .icon {\n          position: absolute;\n          right: 10px;\n          top: 10px;\n          color: #fff;\n        }\n        .text {\n          margin-left: 4px;\n        }\n      }\n    }\n  }\n`;\n","/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Inputs/Card.js",["52"],"/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Inputs/List.js",["53"],"import React, { useState } from \"react\";\nimport styled from \"styled-components\";\n\nexport default (props) => {\n  // setstate\n  const [add, setAdd] = useState(false);\n  const [title, setTitle] = useState(\"\");\n\n  // input list functions\n  function submitList() {\n    if (title.length < 3)\n      return alert(\"The title must contain at least 3 characters.\");\n    let json = localStorage.getItem(\"lists\");\n    let list = JSON.parse(json);\n    list.push({\n      title: title,\n      cards: [],\n    });\n    localStorage.setItem(\"lists\", JSON.stringify(list));\n    setAdd(false);\n    props.updateList(list);\n  }\n\n  return (\n    <Input>\n      {add === true ? (\n        <React.Fragment>\n          <input\n            className=\"input\"\n            type=\"text\"\n            placeholder=\"List title\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n          />\n          <button onClick={submitList} className=\"button\">\n            Add\n          </button>\n          <button onClick={() => setAdd(false)} className=\"button\">\n            Cancel\n          </button>\n        </React.Fragment>\n      ) : (\n        <div onClick={() => setAdd(true)} className=\"add-more\">\n          <i className=\"fa fa-plus\" aria-hidden=\"true\"></i> Add another list\n        </div>\n      )}\n    </Input>\n  );\n};\n\n// styling\nconst Input = styled.div`\n  display: flex;\n  justify-content: flex-start;\n  border-bottom: solid 1px rgba(78, 78, 78, 0.13);\n  margin-bottom: 10px;\n  padding-bottom: 10px;\n  @media (max-width: 1000px) {\n    justify-content: center;\n  }\n  .input {\n    padding: 15px;\n    border-top-left-radius: 5px;\n    border-bottom-left-radius: 5px;\n    border: none;\n    outline: none;\n    color: #222;\n  }\n  .button {\n    border: none;\n    outline: none;\n    background: rgba(34, 34, 34, 0.18);\n    transition: ease all 0.4s;\n    padding: 15px;\n    border-radius: 0px;\n    color: #fff;\n    &:hover {\n      cursor: pointer;\n      background: rgba(34, 34, 34, 0.25);\n    }\n  }\n  .add-more {\n    background: rgba(34, 34, 34, 0.18);\n    transition: ease all 0.4s;\n    padding: 15px;\n    border-radius: 5px;\n    &:hover {\n      cursor: pointer;\n      background: rgba(34, 34, 34, 0.25);\n    }\n  }\n`;\n","/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Card.js",["54"],"/mnt/c/Users/yfove/Documents/vscode/wello-notes/src/components/Cards.js",["55"],"// Dependencies\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\n// Imports\nimport Card from \"./Card\";\n\nexport default (props) => {\n  const deleteCard = (index) => {\n    let json = localStorage.getItem(\"lists\");\n    let list = JSON.parse(json);\n    let newCards = list[props.index].cards.filter(\n      (item, ix) => item !== list[props.index].cards[index]\n    );\n    list[props.index].cards = newCards;\n    props.updateList(list);\n  };\n  return (\n    <Droppable droppableId={`list-${props.index}`}>\n      {(provided) => (\n        <Cards ref={provided.innerRef} {...provided.droppableProps}>\n          {props.data.map((card, index) => (\n            <Card\n              index={index}\n              category={props.index}\n              key={index}\n              message={card}\n              deleteCard={() => {\n                deleteCard(index);\n              }}\n            />\n          ))}\n          {provided.placeholder}\n        </Cards>\n      )}\n    </Droppable>\n  );\n};\n\nconst Cards = styled.div`\n  min-height: 50px;\n`;\n",{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":8,"column":1,"nodeType":"62","endLine":18,"endColumn":3},{"ruleId":"60","severity":1,"message":"61","line":4,"column":1,"nodeType":"62","endLine":10,"endColumn":3},{"ruleId":"60","severity":1,"message":"61","line":4,"column":1,"nodeType":"62","endLine":6,"endColumn":3},{"ruleId":"60","severity":1,"message":"61","line":10,"column":1,"nodeType":"62","endLine":97,"endColumn":3},{"ruleId":"60","severity":1,"message":"61","line":4,"column":1,"nodeType":"62","endLine":45,"endColumn":3},{"ruleId":"60","severity":1,"message":"61","line":4,"column":1,"nodeType":"62","endLine":49,"endColumn":3},{"ruleId":"60","severity":1,"message":"61","line":6,"column":1,"nodeType":"62","endLine":30,"endColumn":3},{"ruleId":"60","severity":1,"message":"61","line":9,"column":1,"nodeType":"62","endLine":39,"endColumn":3},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]